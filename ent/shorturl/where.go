// Code generated by entc, DO NOT EDIT.

package shorturl

import (
	"time"

	"github.com/drrrMikado/shorten/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// ShortURL applies equality check predicate on the "short_url" field. It's identical to ShortURLEQ.
func ShortURL(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortURL), v))
	})
}

// LongURL applies equality check predicate on the "long_url" field. It's identical to LongURLEQ.
func LongURL(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongURL), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKey), v))
	})
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKey), v...))
	})
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKey), v...))
	})
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKey), v))
	})
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKey), v))
	})
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKey), v))
	})
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKey), v))
	})
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKey), v))
	})
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKey), v))
	})
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKey), v))
	})
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKey), v))
	})
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKey), v))
	})
}

// ShortURLEQ applies the EQ predicate on the "short_url" field.
func ShortURLEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortURL), v))
	})
}

// ShortURLNEQ applies the NEQ predicate on the "short_url" field.
func ShortURLNEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortURL), v))
	})
}

// ShortURLIn applies the In predicate on the "short_url" field.
func ShortURLIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShortURL), v...))
	})
}

// ShortURLNotIn applies the NotIn predicate on the "short_url" field.
func ShortURLNotIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShortURL), v...))
	})
}

// ShortURLGT applies the GT predicate on the "short_url" field.
func ShortURLGT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortURL), v))
	})
}

// ShortURLGTE applies the GTE predicate on the "short_url" field.
func ShortURLGTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortURL), v))
	})
}

// ShortURLLT applies the LT predicate on the "short_url" field.
func ShortURLLT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortURL), v))
	})
}

// ShortURLLTE applies the LTE predicate on the "short_url" field.
func ShortURLLTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortURL), v))
	})
}

// ShortURLContains applies the Contains predicate on the "short_url" field.
func ShortURLContains(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortURL), v))
	})
}

// ShortURLHasPrefix applies the HasPrefix predicate on the "short_url" field.
func ShortURLHasPrefix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortURL), v))
	})
}

// ShortURLHasSuffix applies the HasSuffix predicate on the "short_url" field.
func ShortURLHasSuffix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortURL), v))
	})
}

// ShortURLEqualFold applies the EqualFold predicate on the "short_url" field.
func ShortURLEqualFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortURL), v))
	})
}

// ShortURLContainsFold applies the ContainsFold predicate on the "short_url" field.
func ShortURLContainsFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortURL), v))
	})
}

// LongURLEQ applies the EQ predicate on the "long_url" field.
func LongURLEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongURL), v))
	})
}

// LongURLNEQ applies the NEQ predicate on the "long_url" field.
func LongURLNEQ(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongURL), v))
	})
}

// LongURLIn applies the In predicate on the "long_url" field.
func LongURLIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongURL), v...))
	})
}

// LongURLNotIn applies the NotIn predicate on the "long_url" field.
func LongURLNotIn(vs ...string) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongURL), v...))
	})
}

// LongURLGT applies the GT predicate on the "long_url" field.
func LongURLGT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongURL), v))
	})
}

// LongURLGTE applies the GTE predicate on the "long_url" field.
func LongURLGTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongURL), v))
	})
}

// LongURLLT applies the LT predicate on the "long_url" field.
func LongURLLT(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongURL), v))
	})
}

// LongURLLTE applies the LTE predicate on the "long_url" field.
func LongURLLTE(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongURL), v))
	})
}

// LongURLContains applies the Contains predicate on the "long_url" field.
func LongURLContains(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongURL), v))
	})
}

// LongURLHasPrefix applies the HasPrefix predicate on the "long_url" field.
func LongURLHasPrefix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongURL), v))
	})
}

// LongURLHasSuffix applies the HasSuffix predicate on the "long_url" field.
func LongURLHasSuffix(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongURL), v))
	})
}

// LongURLEqualFold applies the EqualFold predicate on the "long_url" field.
func LongURLEqualFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongURL), v))
	})
}

// LongURLContainsFold applies the ContainsFold predicate on the "long_url" field.
func LongURLContainsFold(v string) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongURL), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.ShortUrl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ShortUrl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShortUrl) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShortUrl) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShortUrl) predicate.ShortUrl {
	return predicate.ShortUrl(func(s *sql.Selector) {
		p(s.Not())
	})
}
