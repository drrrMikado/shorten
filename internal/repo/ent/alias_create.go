// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/drrrMikado/shorten/internal/repo/ent/alias"
)

// AliasCreate is the builder for creating a Alias entity.
type AliasCreate struct {
	config
	mutation *AliasMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AliasCreate) SetCreateTime(t time.Time) *AliasCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AliasCreate) SetNillableCreateTime(t *time.Time) *AliasCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AliasCreate) SetUpdateTime(t time.Time) *AliasCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AliasCreate) SetNillableUpdateTime(t *time.Time) *AliasCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetKey sets the "key" field.
func (ac *AliasCreate) SetKey(s string) *AliasCreate {
	ac.mutation.SetKey(s)
	return ac
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ac *AliasCreate) SetNillableKey(s *string) *AliasCreate {
	if s != nil {
		ac.SetKey(*s)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *AliasCreate) SetURL(s string) *AliasCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ac *AliasCreate) SetNillableURL(s *string) *AliasCreate {
	if s != nil {
		ac.SetURL(*s)
	}
	return ac
}

// SetPv sets the "pv" field.
func (ac *AliasCreate) SetPv(u uint64) *AliasCreate {
	ac.mutation.SetPv(u)
	return ac
}

// SetNillablePv sets the "pv" field if the given value is not nil.
func (ac *AliasCreate) SetNillablePv(u *uint64) *AliasCreate {
	if u != nil {
		ac.SetPv(*u)
	}
	return ac
}

// SetExpire sets the "expire" field.
func (ac *AliasCreate) SetExpire(t time.Time) *AliasCreate {
	ac.mutation.SetExpire(t)
	return ac
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (ac *AliasCreate) SetNillableExpire(t *time.Time) *AliasCreate {
	if t != nil {
		ac.SetExpire(*t)
	}
	return ac
}

// Mutation returns the AliasMutation object of the builder.
func (ac *AliasCreate) Mutation() *AliasMutation {
	return ac.mutation
}

// Save creates the Alias in the database.
func (ac *AliasCreate) Save(ctx context.Context) (*Alias, error) {
	var (
		err  error
		node *Alias
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AliasMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AliasCreate) SaveX(ctx context.Context) *Alias {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AliasCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := alias.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := alias.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.Key(); !ok {
		v := alias.DefaultKey
		ac.mutation.SetKey(v)
	}
	if _, ok := ac.mutation.URL(); !ok {
		v := alias.DefaultURL
		ac.mutation.SetURL(v)
	}
	if _, ok := ac.mutation.Pv(); !ok {
		v := alias.DefaultPv
		ac.mutation.SetPv(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AliasCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New("ent: missing required field \"key\"")}
	}
	if v, ok := ac.mutation.Key(); ok {
		if err := alias.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf("ent: validator failed for field \"key\": %w", err)}
		}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	if v, ok := ac.mutation.URL(); ok {
		if err := alias.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	return nil
}

func (ac *AliasCreate) sqlSave(ctx context.Context) (*Alias, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AliasCreate) createSpec() (*Alias, *sqlgraph.CreateSpec) {
	var (
		_node = &Alias{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: alias.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alias.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alias.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alias.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alias.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := ac.mutation.Pv(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: alias.FieldPv,
		})
		_node.Pv = value
	}
	if value, ok := ac.mutation.Expire(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alias.FieldExpire,
		})
		_node.Expire = value
	}
	return _node, _spec
}

// AliasCreateBulk is the builder for creating many Alias entities in bulk.
type AliasCreateBulk struct {
	config
	builders []*AliasCreate
}

// Save creates the Alias entities in the database.
func (acb *AliasCreateBulk) Save(ctx context.Context) ([]*Alias, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alias, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AliasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AliasCreateBulk) SaveX(ctx context.Context) []*Alias {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
